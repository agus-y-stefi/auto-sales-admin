# Archivo: .github/workflows/playwright-tests.yml
name: Pruebas de Playwright

on:
  push:
    branches: [ DevOps ]
    paths:
      - 'test-automation/**'
      - 'src/**'
      - '.github/workflows/playwright-tests.yml'
  pull_request:
    branches: [ DevOps ]
    paths:
      - 'test-automation/**'
      - 'src/**'
      - '.github/workflows/playwright-tests.yml'

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: [3.11]
        browser: [chromium]
      fail-fast: false

    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      # Configurar Python con cache de pip
      - name: Configurar Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
          cache-dependency-path: 'test-automation/requirements.txt'

      # Instalar dependencias solo si no están en cache
      - name: Instalar dependencias Python
        if: steps.setup-python.outputs.cache-hit != 'true'
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Cache de navegadores Playwright
      - name: Cache navegadores Playwright
        uses: actions/cache@v4
        id: cache-playwright
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ matrix.browser }}-${{ hashFiles('test-automation/requirements.txt') }}

      # Instalar navegadores solo si no están en cache
      - name: Instalar navegadores Playwright
        if: steps.cache-playwright.outputs.cache-hit != 'true'
        run: |
          playwright install ${{ matrix.browser }}
          playwright install-deps ${{ matrix.browser }}

      # Levantar servidor Next.js
      - name: Levantar servidor Next.js
        run: |
          cd nextjs-front
          npm install
          npm run build
          nohup npm start &
          npx wait-on http://localhost:3000
        env:
          CI: true

      # Crear carpetas de reportes
      - name: Preparar estructura de carpetas
        run: |
          mkdir -p test-automation/reports/screenshots
          mkdir -p test-automation/test-results

      # Ejecutar pruebas Playwright
      - name: Ejecutar pruebas
        run: |
          pytest test-automation/tests/ \
            --browser ${{ matrix.browser }} \
            --html=test-automation/reports/playwright-report-${{ matrix.browser }}.html \
            --self-contained-html \
            --junit-xml=test-automation/test-results/junit-${{ matrix.browser }}.xml \
            --maxfail=5 \
            -v
        env:
          CI: true
          HEADLESS: true

      # Subir reportes solo en caso de fallo
      - name: Subir reportes de pruebas
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: test-reports-${{ matrix.browser }}-${{ github.run_number }}
          path: |
            test-automation/reports/
            test-automation/test-results/
          retention-days: 30

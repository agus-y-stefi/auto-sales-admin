# Archivo: .github/workflows/playwright-tests.yml
name: Pruebas de Playwright

# Cuándo se ejecuta el workflow
on:
  push:
    branches: [ DevOps ]  # Se ejecuta en push a la rama DevOps
  pull_request:
    branches: [ DevOps ]  # Se ejecuta en PRs hacia DevOps

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: [3.11]
        browser: [chromium]  # Podés agregar firefox, webkit

    steps:
      # 1. Descargar el código del repo
      - name: Checkout código
        uses: actions/checkout@v4
        
      # 2. Configurar Python
      - name: Configurar Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          
      # 3. Cache para dependencias pip
      - name: Cache dependencias pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('test-automation/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            
      # 4. Instalar dependencias de Python
      - name: Instalar dependencias
        run: |
          python -m pip install --upgrade pip
          pip install -r test-automation/requirements.txt  # ⚡ Ajustado path correcto

      # 5. Cache para navegadores Playwright
      - name: Cache navegadores Playwright
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: playwright-browsers-${{ matrix.browser }}
          
      # 6. Instalar navegadores Playwright si no están en cache
      - name: Instalar navegadores Playwright
        run: |
          if [ ! -d "$HOME/.cache/ms-playwright" ]; then
            playwright install --with-deps
          else
            echo "Playwright browsers ya están en cache"
          fi
          
      # 7. Crear carpetas de reportes
      - name: Crear carpetas de reportes
        run: |
          mkdir -p test-automation/reports
          mkdir -p test-automation/test-results
          
      # 8. Ejecutar pruebas
      - name: Ejecutar pruebas Playwright
        run: |
          pytest test-automation/tests/ \
            --browser ${{ matrix.browser }} \
            --html=test-automation/reports/playwright-report-${{ matrix.browser }}.html \
            --self-contained-html \
            --junit-xml=test-automation/test-results/junit-${{ matrix.browser }}.xml
        env:
          CI: true
          
      # 9. Subir reportes HTML si fallan las pruebas
      - name: Subir reportes HTML
        uses: actions/upload-artifact@v4
        if: failure()  # Solo si fallan
        with:
          name: playwright-reports-${{ matrix.browser }}
          path: |
            test-automation/reports/
            test-automation/test-results/
          retention-days: 30
          
      # 10. Subir screenshots si fallan las pruebas
      - name: Subir screenshots de errores
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: screenshots-${{ matrix.browser }}
          path: test-automation/reports/screenshot_*.png
          retention-days: 7
          
      # 11. Publicar resultados de pruebas en GitHub UI
      - name: Publicar resultados
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: Resultados Playwright (${{ matrix.browser }})
          path: test-automation/test-results/junit-${{ matrix.browser }}.xml
          reporter: java-junit

